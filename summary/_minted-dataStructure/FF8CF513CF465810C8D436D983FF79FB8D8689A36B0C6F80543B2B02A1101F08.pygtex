\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kd}{public} \PYG{k+kd}{class} \PYG{n+nc}{Trie} \PYG{o}{\PYGZob{}} \PYG{c+c1}{// Trie with memo, Time: o(m*2\PYGZca{}n)}
    \PYG{k+kt}{boolean} \PYG{n}{isKey}\PYG{o}{;}
    \PYG{n}{Trie} \PYG{o}{[]} \PYG{n}{child}\PYG{o}{;}
    \PYG{k+kd}{public} \PYG{n+nf}{Trie}\PYG{o}{()} \PYG{o}{\PYGZob{}}
        \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{isKey} \PYG{o}{=} \PYG{k+kc}{false}\PYG{o}{;}
        \PYG{n}{child} \PYG{o}{=} \PYG{k}{new} \PYG{n}{Trie}\PYG{o}{[}\PYG{l+m+mi}{26}\PYG{o}{];}
    \PYG{o}{\PYGZcb{}}
    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{insert}\PYG{o}{(}\PYG{n}{String} \PYG{n}{s}\PYG{o}{)} \PYG{o}{\PYGZob{}}
        \PYG{k+kt}{int} \PYG{o}{[]} \PYG{n}{memo} \PYG{o}{=} \PYG{k}{new} \PYG{k+kt}{int} \PYG{o}{[}\PYG{n}{s}\PYG{o}{.}\PYG{n+na}{length}\PYG{o}{()];}
        \PYG{n}{Trie} \PYG{n}{p} \PYG{o}{=} \PYG{k}{this}\PYG{o}{;}
        \PYG{k+kt}{char} \PYG{o}{[]} \PYG{n}{sArr} \PYG{o}{=} \PYG{n}{s}\PYG{o}{.}\PYG{n+na}{toCharArray}\PYG{o}{();}
        \PYG{k+kt}{boolean} \PYG{n}{added} \PYG{o}{=} \PYG{k+kc}{false}\PYG{o}{;}
        \PYG{k}{for} \PYG{o}{(}\PYG{k+kt}{int} \PYG{n}{i} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{o}{;} \PYG{n}{i} \PYG{o}{\PYGZlt{}} \PYG{n}{sArr}\PYG{o}{.}\PYG{n+na}{length}\PYG{o}{;} \PYG{n}{i}\PYG{o}{++)} \PYG{o}{\PYGZob{}}
            \PYG{k+kt}{char} \PYG{n}{c} \PYG{o}{=} \PYG{n}{sArr}\PYG{o}{[}\PYG{n}{i}\PYG{o}{];}
            \PYG{k}{if} \PYG{o}{(}\PYG{n}{p}\PYG{o}{.}\PYG{n+na}{child}\PYG{o}{[}\PYG{n}{c}\PYG{o}{\PYGZhy{}}\PYG{l+s+sc}{\PYGZsq{}a\PYGZsq{}}\PYG{o}{]} \PYG{o}{==} \PYG{k+kc}{null}\PYG{o}{)}
                \PYG{n}{p}\PYG{o}{.}\PYG{n+na}{child}\PYG{o}{[}\PYG{n}{c}\PYG{o}{\PYGZhy{}}\PYG{l+s+sc}{\PYGZsq{}a\PYGZsq{}}\PYG{o}{]} \PYG{o}{=} \PYG{k}{new} \PYG{n}{Trie}\PYG{o}{();}
            \PYG{n}{p} \PYG{o}{=} \PYG{n}{p}\PYG{o}{.}\PYG{n+na}{child}\PYG{o}{[}\PYG{n}{c}\PYG{o}{\PYGZhy{}}\PYG{l+s+sc}{\PYGZsq{}a\PYGZsq{}}\PYG{o}{];}
            \PYG{k}{if} \PYG{o}{(}\PYG{n}{p}\PYG{o}{.}\PYG{n+na}{isKey} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{isConcatenated}\PYG{o}{(}\PYG{n}{s}\PYG{o}{,} \PYG{n}{i}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{n}{memo}\PYG{o}{)} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{o}{!}\PYG{n}{added}\PYG{o}{)} \PYG{o}{\PYGZob{}}
                \PYG{n}{res}\PYG{o}{.}\PYG{n+na}{add}\PYG{o}{(}\PYG{n}{s}\PYG{o}{);}
                \PYG{n}{added} \PYG{o}{=} \PYG{k+kc}{true}\PYG{o}{;}
            \PYG{o}{\PYGZcb{}}
        \PYG{o}{\PYGZcb{}}
        \PYG{n}{p}\PYG{o}{.}\PYG{n+na}{isKey} \PYG{o}{=} \PYG{k+kc}{true}\PYG{o}{;}
    \PYG{o}{\PYGZcb{}}     \PYG{c+c1}{// 这么看来，我还没能透彻理解dfs深搜中的重复，什么时候应该拥有记忆？！！！}
    \PYG{k+kd}{public} \PYG{k+kt}{boolean} \PYG{n+nf}{isConcatenated}\PYG{o}{(}\PYG{n}{String} \PYG{n}{s}\PYG{o}{,} \PYG{k+kt}{int} \PYG{n}{start}\PYG{o}{,} \PYG{k+kt}{int} \PYG{n}{cnt}\PYG{o}{,} \PYG{k+kt}{int} \PYG{o}{[]} \PYG{n}{memo}\PYG{o}{)} \PYG{o}{\PYGZob{}}
        \PYG{k}{if} \PYG{o}{(}\PYG{n}{start} \PYG{o}{==} \PYG{n}{s}\PYG{o}{.}\PYG{n+na}{length}\PYG{o}{()} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{cnt} \PYG{o}{\PYGZgt{}} \PYG{l+m+mi}{0}\PYG{o}{)} \PYG{k}{return} \PYG{k+kc}{true}\PYG{o}{;}
        \PYG{k}{if} \PYG{o}{(}\PYG{n}{memo}\PYG{o}{[}\PYG{n}{start}\PYG{o}{]} \PYG{o}{!=} \PYG{l+m+mi}{0}\PYG{o}{)} \PYG{k}{return} \PYG{n}{memo}\PYG{o}{[}\PYG{n}{start}\PYG{o}{]} \PYG{o}{==} \PYG{l+m+mi}{1}\PYG{o}{;}
        \PYG{n}{Trie} \PYG{n}{p} \PYG{o}{=} \PYG{k}{this}\PYG{o}{;}
        \PYG{k+kt}{char} \PYG{o}{[]} \PYG{n}{sArr} \PYG{o}{=} \PYG{n}{s}\PYG{o}{.}\PYG{n+na}{toCharArray}\PYG{o}{();}
        \PYG{k}{for} \PYG{o}{(}\PYG{k+kt}{int} \PYG{n}{i} \PYG{o}{=} \PYG{n}{start}\PYG{o}{;} \PYG{n}{i} \PYG{o}{\PYGZlt{}} \PYG{n}{sArr}\PYG{o}{.}\PYG{n+na}{length}\PYG{o}{;} \PYG{n}{i}\PYG{o}{++)} \PYG{o}{\PYGZob{}}
            \PYG{k+kt}{char} \PYG{n}{c} \PYG{o}{=} \PYG{n}{sArr}\PYG{o}{[}\PYG{n}{i}\PYG{o}{];}
            \PYG{n}{Trie} \PYG{n}{cur} \PYG{o}{=} \PYG{n}{p}\PYG{o}{.}\PYG{n+na}{child}\PYG{o}{[}\PYG{n}{c}\PYG{o}{\PYGZhy{}}\PYG{l+s+sc}{\PYGZsq{}a\PYGZsq{}}\PYG{o}{];}
            \PYG{k}{if} \PYG{o}{(}\PYG{n}{cur} \PYG{o}{==} \PYG{k+kc}{null}\PYG{o}{)} \PYG{o}{\PYGZob{}}
                \PYG{n}{memo}\PYG{o}{[}\PYG{n}{start}\PYG{o}{]} \PYG{o}{=} \PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{o}{;}
                \PYG{k}{return} \PYG{k+kc}{false}\PYG{o}{;}
            \PYG{o}{\PYGZcb{}} \PYG{k}{else} \PYG{o}{\PYGZob{}}
                \PYG{k}{if} \PYG{o}{(}\PYG{n}{cur}\PYG{o}{.}\PYG{n+na}{isKey} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{isConcatenated}\PYG{o}{(}\PYG{n}{s}\PYG{o}{,} \PYG{n}{i}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{o}{,} \PYG{n}{cnt}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{o}{,} \PYG{n}{memo}\PYG{o}{))} \PYG{o}{\PYGZob{}}
                    \PYG{n}{memo}\PYG{o}{[}\PYG{n}{start}\PYG{o}{]} \PYG{o}{=} \PYG{l+m+mi}{1}\PYG{o}{;}
                    \PYG{k}{return} \PYG{k+kc}{true}\PYG{o}{;}
                \PYG{o}{\PYGZcb{}}
                \PYG{n}{p} \PYG{o}{=} \PYG{n}{cur}\PYG{o}{;}
            \PYG{o}{\PYGZcb{}}
        \PYG{o}{\PYGZcb{}}
        \PYG{n}{memo}\PYG{o}{[}\PYG{n}{start}\PYG{o}{]} \PYG{o}{=} \PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{o}{;}
        \PYG{k}{return} \PYG{k+kc}{false}\PYG{o}{;}
    \PYG{o}{\PYGZcb{}}
\PYG{o}{\PYGZcb{}}
\PYG{c+c1}{// Sort the words based on length}
\PYG{c+c1}{// Use trie to store words: while adding, checking if it is concatenated}
\PYG{c+c1}{// While checking, use dfs + memo}
\PYG{n}{List}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{\PYGZgt{}} \PYG{n}{res} \PYG{o}{=} \PYG{k}{new} \PYG{n}{ArrayList}\PYG{o}{\PYGZlt{}\PYGZgt{}();}
\PYG{k+kd}{public} \PYG{n}{List}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{\PYGZgt{}} \PYG{n+nf}{findAllConcatenatedWordsInADict}\PYG{o}{(}\PYG{n}{String}\PYG{o}{[]} \PYG{n}{words}\PYG{o}{)} \PYG{o}{\PYGZob{}}
    \PYG{n}{Arrays}\PYG{o}{.}\PYG{n+na}{sort}\PYG{o}{(}\PYG{n}{words}\PYG{o}{,} \PYG{o}{(}\PYG{n}{x}\PYG{o}{,} \PYG{n}{y}\PYG{o}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{Integer}\PYG{o}{.}\PYG{n+na}{compare}\PYG{o}{(}\PYG{n}{x}\PYG{o}{.}\PYG{n+na}{length}\PYG{o}{(),} \PYG{n}{y}\PYG{o}{.}\PYG{n+na}{length}\PYG{o}{()));}
    \PYG{n}{Trie} \PYG{n}{tree} \PYG{o}{=} \PYG{k}{new} \PYG{n}{Trie}\PYG{o}{();}
    \PYG{k}{for} \PYG{o}{(}\PYG{n}{String} \PYG{n}{word} \PYG{o}{:} \PYG{n}{words}\PYG{o}{)}
        \PYG{n}{tree}\PYG{o}{.}\PYG{n+na}{insert}\PYG{o}{(}\PYG{n}{word}\PYG{o}{);}
    \PYG{k}{return} \PYG{n}{res}\PYG{o}{;}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
