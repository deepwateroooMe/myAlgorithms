\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{// 对于每个节点，有一下三种case：}
\PYG{c+c1}{// case（1）：如果它有一个孩子，且这个孩子是叶子（状态0），则它需要摄像头，res ++，然后返回1，表示已经给它装上了摄像头。}
\PYG{c+c1}{// case（2）：如果它有一个孩子，且这个孩子是叶子的父节点（状态1），那么它已经被覆盖，返回2。}
\PYG{c+c1}{// case（0）：否则，这个节点无孩子，或者说，孩子都是状态2，那么我们将这个节点视为叶子来处理。}
\PYG{c+c1}{// 由于dfs最终返回后，整棵树的根节点的状态还未处理，因此需要判断，若根节点被视为叶子，需要在其上加一个摄像头。}
\PYG{k+kd}{private} \PYG{k+kt}{int} \PYG{n+nf}{dfs}\PYG{o}{(}\PYG{n}{TreeNode} \PYG{n}{r}\PYG{o}{)} \PYG{o}{\PYGZob{}}
    \PYG{c+c1}{// 空节点不需要被覆盖，归入情况2}
    \PYG{k}{if} \PYG{o}{(}\PYG{n}{r} \PYG{o}{==} \PYG{k+kc}{null}\PYG{o}{)} \PYG{k}{return} \PYG{l+m+mi}{2}\PYG{o}{;} \PYG{c+c1}{// do not need cover}
    \PYG{k+kt}{int} \PYG{n}{left} \PYG{o}{=} \PYG{n}{dfs}\PYG{o}{(}\PYG{n}{r}\PYG{o}{.}\PYG{n+na}{left}\PYG{o}{);}  \PYG{c+c1}{// 递归求左右孩子的状态}
    \PYG{k+kt}{int} \PYG{n}{right} \PYG{o}{=} \PYG{n}{dfs}\PYG{o}{(}\PYG{n}{r}\PYG{o}{.}\PYG{n+na}{right}\PYG{o}{);}
    \PYG{c+c1}{// 获取左右孩子状态之后的处理}
    \PYG{c+c1}{// 有叶子孩子，加摄像头，归入情况1}
    \PYG{k}{if} \PYG{o}{(}\PYG{n}{left} \PYG{o}{==} \PYG{l+m+mi}{0} \PYG{o}{||} \PYG{n}{right} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{o}{)} \PYG{o}{\PYGZob{}}
        \PYG{n}{res} \PYG{o}{++;}
        \PYG{k}{return} \PYG{l+m+mi}{1}\PYG{o}{;}
    \PYG{o}{\PYGZcb{}}
    \PYG{c+c1}{// 孩子上有摄像头，说明此节点已被覆盖，情况2;}
    \PYG{k}{if} \PYG{o}{(}\PYG{n}{left} \PYG{o}{==} \PYG{l+m+mi}{1} \PYG{o}{||} \PYG{n}{right} \PYG{o}{==} \PYG{l+m+mi}{1}\PYG{o}{)} \PYG{k}{return} \PYG{l+m+mi}{2}\PYG{o}{;}
    \PYG{k}{return} \PYG{l+m+mi}{0}\PYG{o}{;}
\PYG{o}{\PYGZcb{}}
\PYG{k+kt}{int} \PYG{n}{res} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{o}{;}
\PYG{k+kd}{public} \PYG{k+kt}{int} \PYG{n+nf}{minCameraCover}\PYG{o}{(}\PYG{n}{TreeNode} \PYG{n}{root}\PYG{o}{)} \PYG{o}{\PYGZob{}}
    \PYG{c+c1}{// 若根节点被视为叶子，需要在其上加一个摄像头}
    \PYG{k}{return} \PYG{o}{(}\PYG{n}{dfs}\PYG{o}{(}\PYG{n}{root}\PYG{o}{)} \PYG{o}{==} \PYG{l+m+mi}{0} \PYG{o}{?} \PYG{l+m+mi}{1} \PYG{o}{:} \PYG{l+m+mi}{0}\PYG{o}{)} \PYG{o}{+} \PYG{n}{res}\PYG{o}{;}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
